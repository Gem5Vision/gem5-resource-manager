
{
    "version" : "22.1",
    "url_base" : "http://dist.gem5.org/dist/v22-1",
    "previous-versions" : {
        "develop" : "https://gem5.googlesource.com/public/gem5-resources/+/refs/heads/develop/resources.json?format=TEXT",
        "21.2" : "http://resources.gem5.org/prev-resources-json/resources-21-2.json",
        "22.0" : "http://resources.gem5.org/prev-resources-json/resources-22-0.json"
    },
    "resources": [
        {
            "type" : "workload",
            "name" : "x86-ubuntu-18.04-boot",
            "documentation" : "A full boot of Ubuntu 18.04 with Linux 5.4.49 for X86. It runs an `m5 exit` command when the boot is completed unless the readfile is specified. If specified the readfile will be executed after booting.",
            "function": "set_kernel_disk_workload",
            "resources" : {
                "kernel" : "x86-linux-kernel-5.4.49",
                "disk_image":"x86-ubuntu-18.04-img"
            },
            "additional_params" : {}
        },
        {
            "type" : "workload",
            "name" : "riscv-ubuntu-20.04-boot",
            "documentation" : "A full boot of Ubuntu 20.04 with Linux 5.10 for RISCV. It runs an `m5 exit` command when the boot is completed unless the readfile is specified. If specified the readfile will be executed after booting.",
            "function": "set_kernel_disk_workload",
            "resources" : {
                "kernel" : "riscv-bootloader-vmlinux-5.10",
                "disk_image":"riscv-ubuntu-20.04-img"
            },
            "additional_params" : {}
        },
        {
            "type" : "workload",
            "name" : "arm64-ubuntu-20.04-boot",
            "documentation" : "A full boot of Ubuntu 20.04 with Linux 5.4.49 for ARM64. It runs an `m5 exit` command when the boot is completed unless the readfile is specified. If specified the readfile will be executed after booting.",
            "function": "set_kernel_disk_workload",
            "resources" : {
                "kernel" : "arm64-linux-kernel-5.4.49",
                "disk_image": "arm64-ubuntu-20.04-img",
                "bootloader": "arm64-bootloader-foundation"
            },
            "additional_params" : {}
        },
        {
            "type": "workload",
            "name": "x86-print-this-15000-with-simpoints",
            "documentation": "This workload is used in the 'configs/example/gem5_library/checkpoints/simpoints-se-checkpoint.py' example configuration script.",
            "function": "set_se_simpoint_workload",
            "resources": {
                "binary": "x86-print-this",
                "simpoint": "x86-print-this-1500-simpoints"
            },
            "additional_params" :{
                "arguments": ["print this", 15000]
            }
        },
        {
            "type": "workload",
            "name": "x86-print-this-15000-with-simpoints-and-checkpoint",
            "documentation": "This workload is used in the 'configs/example/gem5_library/checkpoints/simpoints-se-restore.py' example configuration script.",
            "function": "set_se_simpoint_workload",
            "resources": {
                "binary": "x86-print-this",
                "simpoint": "x86-print-this-1500-simpoints",
                "checkpoint": "simpoints-se-checkpoints-v22-1-v2"
            },
            "additional_params" :{
                "arguments": ["print this", 15000]
            }
        },
        {
            "type": "resource",
            "name": "x86-print-this-1500-simpoints",
            "documentation": "Simpoints for running the 'x86-print-this' resource with the parameters `\"print this\" 15000`. This is encapsulated in the 'x86-print-this-15000-with-simpoints' workload.",
            "architecture": "X86",
            "is_zipped" : false,
            "md5sum" : "3fcffe3956c8a95e3fb82e232e2b41fb",
            "source" : null,
            "is_tar_archive" : true,
            "url": "{url_base}/simpoints/x86-print-this-15000-simpoints-20221013.tar",
            "additional_metadata" : {
                "simpoint_interval": 1000000,
                "warmup_interval": 1000000
            }
        },
        {
            "type": "resource",
            "name" : "vega-mmio",
            "documentation" : "Used with the 'x86-gpu-fs-img' disk image.",
            "architecture": "X86",
            "is_zipped" : false,
            "md5sum" : "c4ff3326ae8a036e329b8b595c83bd6d",
            "source" : "src/gpu-fs",
            "url": "{url_base}/misc/gpu/vega-mmio.log"
        },
        {
            "type": "resource",
            "name" : "riscv-hello-example-checkpoint",
            "documentation" : "A checkpoint used in 'configs/example/gem5_library/checkpoints/riscv-hello-restore-checkpoint.py'. This was used for the v22.0 release and should not be used for future releases.",
            "architecture": "RISCV",
            "is_zipped" : false,
            "md5sum" : "3a57c1bb1077176c4587b8a3bf4f8ace",
            "source" : null,
            "is_tar_archive" : true,
            "url": "{url_base}/checkpoints/riscv-hello-example-checkpoint.tar"
        },
        {
            "type": "resource",
            "name" : "simpoints-se-checkpoints-v22-1",
            "documentation" : "Checkpoints used in 'configs/example/gem5_library/checkpoints/simpoints-se-restore.py'. This is deprecated, 'simpoints-se-checkpits-v22-1-v2' should be used instead. This resource will be removed in future releases of gem5.",
            "architecture": "X86",
            "is_zipped" : true,
            "md5sum" : "ebab7fffb11e93f2aa6ccfed9a0f692a",
            "source" : null,
            "is_tar_archive" : true,
            "url": "{url_base}/checkpoints/simpoints-se-checkpoints-example-20220928.tar.gz"
        },
        {
            "type": "resource",
            "name" : "simpoints-se-checkpoints-v22-1-v2",
            "documentation" : "Checkpoints used in 'configs/example/gem5_library/checkpoints/simpoints-se-restore.py'.",
            "architecture": "X86",
            "is_zipped" : true,
            "md5sum" : "c88e51cca030720f4cc3e1d24a5cfd75",
            "source" : null,
            "is_tar_archive" : true,
            "url": "{url_base}/checkpoints/simpoints-se-checkpoints-example-20221014.tar.gz"
        },
        {
            "type": "resource",
            "name" : "riscv-hello-example-checkpoint-v22-1",
            "documentation" : "A checkpoint used in 'configs/example/gem5_library/checkpoints/riscv-hello-restore-checkpoint.py'. Used for v22.1 onwards.",
            "architecture": "RISCV",
            "is_zipped" : false,
            "md5sum" : "346c7d079320ef7daead4e03914266c7",
            "source" : null,
            "is_tar_archive" : true,
            "url": "{url_base}/checkpoints/riscv-hello-example-checkpoint-20220801.tar"
        },
        {
            "type": "resource",
            "name" : "riscv-disk-img",
            "documentation" : "A simple RISCV disk image based on busybox.",
            "architecture": "RISCV",
            "is_zipped" : true,
            "md5sum" : "d6126db9f6bed7774518ae25aa35f153",
            "url": "{url_base}/images/riscv/busybox/riscv-disk.img.gz",
            "source" : "src/riscv-fs",
            "additional_metadata" : {
                "root_partition": null
            }
        },
        {
            "type": "resource",
            "name" : "riscv-lupio-busybox-img",
            "documentation" : "A RISCV disk image, based on busybox, to be used with the LupvBoard. Should be used with the 'riscv-lupio-linux-kernel' kernel resource.",
            "architecture": "RISCV",
            "is_zipped" : true,
            "md5sum" : "e5bee8a31f45f4803f87c0d781553ccc",
            "url": "{url_base}/images/riscv/busybox/riscv-lupio-busybox.img.gz",
            "source" : "src/lupv",
            "additional_metadata" : {
                "root_partition": "1"
            }
        },

        {
            "type" : "resource",
            "name" : "x86-m5-exit",
            "documentation" : "A simple binary which will run `m5 exit`. Compiled to the X86 ISA.",
            "architecture" : "X86",
            "is_zipped" : false,
            "md5sum" : "19e178622935fdcee1aff0dd7d6d0ebc",
            "url" : "{url_base}/test-progs/m5-exit/bin/x86/linux/m5_exit",
            "source" : "src/simple"
        },
        {
            "type" : "resource",
            "name" : "x86-m5-exit-repeat",
            "documentation" : "A simple binary which will run `m5 exit` in an infinite loop. Compiled to the X86 ISA.",
            "architecture" : "X86",
            "is_zipped" : false,
            "md5sum" : "0a19604f669c4b9e468cc2bedee62199",
            "url" : "{url_base}/test-progs/m5-exit-repeat/x86-m5-exit-repeat-20220825",
            "source" : "src/m5-exit-repeat"
        },
        {
            "type" : "resource",
            "name" : "x86-matrix-multiply",
            "documentation" : "A simple binary which runs a matrix mutiply operation on two 100x100 matrixes. After multiplication it will return the print the of the multiplication.",
            "architecture" : "X86",
            "is_zipped" : false,
            "md5sum" : "9e758bad40bafef98720085fc3c635b3",
            "url" : "{url_base}/test-progs/matrix-multiply/x86-matrix-multiply-20220826",
            "source" : "src/matrix-multiply"
        },
        {
            "type" : "resource",
            "name" : "x86-parsec",
            "documentation" : "A disk image containing the PARSEC benchmark suite, compiled to X86, built on top of Ubuntu 18.04.",
            "architecture" : "X86",
            "is_zipped" : true,
            "md5sum" : "19131e62c5b10f137948ec5975391477",
            "url" : "{url_base}/images/x86/ubuntu-18-04/parsec.img.gz",
            "source" : "src/parsec",
            "additional_metadata" : {
                "root_partition": "1"
            }
        },
        {
            "type" : "resource",
            "name" : "x86-gapbs",
            "documentation" : "A disk image containing the GAPBS benchmark suite, compiled to X86, built on top of Ubuntu 18.04.",
            "architecture" : "X86",
            "is_zipped" : true,
            "md5sum" : "c9217a88eff20e5547be87368a1499c1",
            "url" : "{url_base}/images/x86/ubuntu-18-04/gapbs.img.gz",
            "source" : "src/gabps",
            "additional_metadata" : {
                "root_partition": "1"
            }
        },
        {
            "type" : "resource",
            "name" : "x86-npb",
            "documentation" : "A disk image containing the NAS Parallel benchmark (NPB) suite, compiled to X86, built on top of Ubuntu 18.04.",
            "architecture" : "X86",
            "is_zipped" : true,
            "md5sum" : "68073181c1ecca2347ad18c3577e0cd9",
            "url" : "{url_base}/images/x86/ubuntu-18-04/npb.img.gz",
            "source" : "src/npb",
            "additional_metadata" : {
                "root_partition": "1"
            }
        },
        {
            "type" : "resource",
            "name" : "x86-gpu-fs-img",
            "documentation" : "An Ubuntu 18.04 disk image with ROCm 4.2 installed. This can be used to run GPU full-system simulations.",
            "architecture" : "X86",
            "is_zipped" : true,
            "md5sum" : "a9aa1159fa11a61e78db8afaddd89bb3",
            "url" : "{url_base}/images/x86/ubuntu-18-04/x86-gpu-fs-20220512.img.gz",
            "source" : "src/gpu-fs",
            "additional_metadata" : {
                "root_partition": "1"
            }
        },
        {
            "type" : "resource",
            "name" : "x86-ubuntu-18.04-img",
            "documentation" : "A disk image containing Ubuntu 18.04 for x86. This image will run an `m5 readfile` instruction after booting. If no script file is specified an `m5 exit` instruction will be executed.",
            "architecture" : "X86",
            "is_zipped" : true,
            "md5sum" : "90e363abf0ddf22eefa2c7c5c9391c49",
            "url" : "{url_base}/images/x86/ubuntu-18-04/x86-ubuntu.img.gz",
            "source" : "src/x86-ubuntu",
            "additional_metadata" : {
                "root_partition": "1"
            }
        },
        {
            "type": "resource",
            "name" : "riscv-ubuntu-20.04-img",
            "documentation" : "A disk image containing Ubuntu 20.04 for RISCV which will run an `m5 readfile` instruction after booting. If no script file is specified an `m5 exit` instruction will be exected",
            "architecture" : "RISCV",
            "is_zipped" : true,
            "md5sum" : "e9ea10a3c606d26e2fa2f8ce5d1a8758",
            "url" : "{url_base}/images/riscv/ubuntu-20-04/riscv-ubuntu-20221118.img.gz",
            "source" : "src/riscv-ubuntu",
            "additional_metadata" : {
                "root_partition": "1"
            }
        },
        {
            "type": "resource",
            "name" : "arm64-ubuntu-18.04-img",
            "documentation" : "A disk image containing Ubuntu 18.04 for arm64.",
            "architecture" : "ARM",
            "is_zipped" : true,
            "md5sum" : "ec7d0156366743fa7b93cbfcea82925c",
            "url" : "{url_base}/images/arm/ubuntu-18-04/arm64-ubuntu-20220425.img.gz",
            "source" : null,
            "additional_metadata" : {
                "root_partition": "1"
            }
        },
        {
            "type": "resource",
            "name": "arm64-ubuntu-20.04-img",
            "documentation": "A disk image containing Ubuntu 20.04 for ARM which will run an `m5 readfile` instruction after booting. If no script file is specified an `m5 exit` instruction will be executed.",
            "architecture" : "ARM",
            "is_zipped" : true,
            "md5sum" : "56cb88c9351bb9b0e65cfe689a205eab",
            "url" : "{url_base}/images/arm/ubuntu-20-04/arm64-ubuntu-20220727.img.gz",
            "source" : "src/arm-ubuntu",
            "additional_metadata" : {
                "root_partition" : "1"
            }
        },
        {
            "type": "resource",
            "name" : "riscv-boot-exit-nodisk",
            "documentation" : "A simple RISCV bootloader with Linux kernel 5.10. The early userspace includes busybox and the m5 binary.",
            "architecture": "RISCV",
            "is_zipped" : false,
            "md5sum" : "8ec185abc97e42b4ab1f0a30fc720e09",
            "url": "{url_base}/misc/riscv/bbl-busybox-boot-exit",
            "source" : "src/riscv-boot-exit-nodisk"
        },
        {
            "type": "resource",
            "name" : "arm64-bootloader",
            "documentation" : "An arm64 bootloader. May be used with the 'arm64-linux-kernel-*' resources.",
            "architecture": "ARM",
            "is_zipped" : false,
            "md5sum" : "94f1a2eecb1600384df54056227300e4",
            "url": "{url_base}/bootloaders/arm/boot.arm64-20220707",
            "source" : null
        },

        {
            "type": "resource",
            "name" : "arm64-bootloader-emm",
            "documentation" : "An arm64 bootloader (emm). May be used with the 'arm64-linux-kernel-*' resources.",
            "architecture": "ARM",
            "is_zipped" : false,
            "md5sum" : "34865b170623b31721decf00d0c8d39f",
            "url": "{url_base}/bootloaders/arm/boot_emm.arm64-20220707",
            "source" : null
        },
        {
            "type": "resource",
            "name" : "arm64-bootloader-foundation",
            "documentation" : "An arm64 bootloader (foundation). May be used with the 'arm64-linux-kernel-*' resources.",
            "architecture": "ARM",
            "is_zipped" : false,
            "md5sum" : "15ffc9c932c6a52da0b560fe8b7b58a2",
            "url": "{url_base}/bootloaders/arm/boot_foundation.arm64-20220707",
            "source" : null
        },
        {
            "type": "resource",
            "name" : "arm64-bootloader-v2",
            "documentation" : "An arm64 bootloader (v2). May be used with the 'arm64-linux-kernel-*' resources.",
            "architecture": "ARM",
            "is_zipped" : false,
            "md5sum" : "c68beeb4d3ba395ae53c0ee999f91d96",
            "url": "{url_base}/bootloaders/arm/boot_v2.arm64-20220707",
            "source" : null
        },
        {
            "type" : "group",
            "name" : "linux-kernel",
            "contents" : [
                {
                    "type" : "resource",
                    "name" : "x86-linux-kernel-5.4.0-105-generic",
                    "documentation" : "The linux kernel (v5.4.0-105-generic), compiled to X86. Used primarily with the 'x86-gpu-fs-img' disk image.",
                    "architecture" : "X86",
                    "is_zipped" : false,
                    "md5sum" : "29b5dd6765d4040112cbf5e6a32ab1b5",
                    "url" : "{url_base}/kernels/x86/static/vmlinux-5.4.0-105-generic",
                    "source" : null
                },
                {
                    "type" : "resource",
                    "name" : "arm64-linux-kernel-4.14.134",
                    "documentation": "The Linux kernel (v4.14.134), compiled to arm64.",
                    "architecture" : "ARM",
                    "is_zipped" : false,
                    "md5sum" : "8771a6437106d680dc6287f27117ee07",
                    "url" : "{url_base}/kernels/arm/static/arm64-vmlinux-4.14.134",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "arm64-linux-kernel-4.19.83",
                    "documentation": "The Linux kernel (v4.19.83), compiled to arm64.",
                    "architecture" : "ARM",
                    "is_zipped" : false,
                    "md5sum" : "732f5c1df58a1d13292170385f2e3d17",
                    "url" : "{url_base}/kernels/arm/static/arm64-vmlinux-4.19.83",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "arm64-linux-kernel-4.4.186",
                    "documentation": "The Linux kernel (v4.4.186), compiled to arm64.",
                    "architecture" : "ARM",
                    "is_zipped" : false,
                    "md5sum" : "f4260a8cf51a2a2e3155ecd88098a558",
                    "url" : "{url_base}/kernels/arm/static/arm64-vmlinux-4.4.186",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "arm64-linux-kernel-4.9.186",
                    "documentation": "The Linux kernel (v4.9.186), compiled to arm64.",
                    "architecture" : "ARM",
                    "is_zipped" : false,
                    "md5sum" : "4ee3f8aceeb6c9805ad10388d8c499c1",
                    "url" : "{url_base}/kernels/arm/static/arm64-vmlinux-4.9.186",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "arm64-linux-kernel-5.10.110",
                    "documentation": "The Linux kernel (v5.10.110), compiled to arm64.",
                    "architecture" : "ARM",
                    "is_zipped" : false,
                    "md5sum" : "4b93e46bd18f74254af07e6610f77c29",
                    "url" : "{url_base}/kernels/arm/static/arm64-vmlinux-5.10.110",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "arm64-linux-kernel-5.15.36",
                    "documentation": "The Linux kernel (v5.15.36), compiled to arm64.",
                    "architecture" : "ARM",
                    "is_zipped" : false,
                    "md5sum" : "03bd04c44efc155d3a678ac3d7ed9b74",
                    "url" : "{url_base}/kernels/arm/static/arm64-vmlinux-5.15.36",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "arm64-linux-kernel-5.4.49",
                    "documentation": "The Linux kernel (v5.4.49), compiled to arm64.",
                    "architecture" : "ARM",
                    "is_zipped" : false,
                    "md5sum" : "1c6dbca1c7d4c44016147fc95cb0388c",
                    "url" : "{url_base}/kernels/arm/static/arm64-vmlinux-5.4.49",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "x86-linux-kernel-4.14.134",
                    "documentation" : "The linux kernel (v4.14.134), compiled to X86.",
                    "architecture" : "X86",
                    "is_zipped" : false,
                    "md5sum" : "21beaaa085884480100e3968f74d4ae0",
                    "url" : "{url_base}/kernels/x86/static/vmlinux-4.14.134",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "x86-linux-kernel-4.19.83",
                    "documentation" : "The linux kernel (v4.19.83), compiled to X86.",
                    "architecture" : "X86",
                    "is_zipped" : false,
                    "md5sum" : "28228eac2eea81ee3ce36305b7641c18",
                    "url" : "{url_base}/kernels/x86/static/vmlinux-4.19.83",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "x86-linux-kernel-4.4.186",
                    "documentation" : "The linux kernel (v4.4.186), compiled to X86.",
                    "architecture" : "X86",
                    "is_zipped" : false,
                    "md5sum" : "23c2a5532d6a0b5dc68a5e089d12ae13",
                    "url" : "{url_base}/kernels/x86/static/vmlinux-4.4.186",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "x86-linux-kernel-4.9.186",
                    "documentation" : "The linux kernel (v4.9.186), compiled to X86.",
                    "architecture" : "X86",
                    "is_zipped" : false,
                    "md5sum" : "e5f5355c9ec5bfa37ec1c289ac84853b",
                    "url" : "{url_base}/kernels/x86/static/vmlinux-4.9.186",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "x86-linux-kernel-5.2.3",
                    "documentation" : "The linux kernel (v5.2.3), compiled to X86.",
                    "architecture" : "X86",
                    "is_zipped" : false,
                    "md5sum" : "4838c99b77d33c8307b939c16624e4ac",
                    "url" : "{url_base}/kernels/x86/static/vmlinux-5.2.3",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "x86-linux-kernel-5.4.49",
                    "documentation" : "The linux kernel (v5.4.49), compiled to X86.",
                    "architecture" : "X86",
                    "is_zipped" : false,
                    "md5sum" : "60a53c7d47d7057436bf4b9df707a841",
                    "url" : "{url_base}/kernels/x86/static/vmlinux-5.4.49",
                    "source" : "src/linux-kernel"
                },
                {
                    "type" : "resource",
                    "name" : "riscv-bootloader-vmlinux-5.10",
                    "documentation" : "A RISCV bootloader kernel binary with linux 5.10.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ac29fe5f71c096e6b2044b4e4d623edc",
                    "url" : "{url_base}/kernels/riscv/static/bootloader-vmlinux-5.10",
                    "source" : "src/riscv-fs"
                },
                {
                    "type" : "resource",
                    "name" : "riscv-lupio-linux-kernel",
                    "documentation": "A kernel built with LupIO device (https://gitlab.com/luplab/lupio) drivers. Must be used when setting LupIO board workloads. Compatible with the 'riscv-lupio-busybox-img' disk image resource.",
                    "is_zipped" : false,
                    "architecture" : "RISCV",
                    "md5sum" : "1b7d6523647db85f9dd2b00d751f5f6f",
                    "url" : "{url_base}/kernels/riscv/static/lupio-linux-20220727",
                    "source" : "src/lupv"
                }
            ]
        },
        {
            "type": "group",
            "name": "print-this",
            "contents": [
                {
                    "type" : "resource",
                    "name": "riscv-print-this",
                    "documentation": "A simple RISC-V binary that prints a string a set number of times. It takes two mandatory arguments: A string to print and an integer specifying how many times the string is to be printed.",
                    "architecture" :"RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ee2963ca71ce13ae2f096198b58064ad",
                    "url" : "{url_base}/test-progs/print-this/riscv-print-this",
                    "source" : "src/print-this"
                },
                {
                    "type" : "resource",
                    "name": "x86-print-this",
                    "documentation": "A simple X86 binary that prints a string a set number of times. It takes two mandatory arguments: A string to print and an integer specifying how many times the string is to be printed.",
                    "architecture" :"X86",
                    "is_zipped" : false,
                    "md5sum" : "eab785f7c14ab97b89e17c9af2f43002",
                    "url" : "{url_base}/test-progs/print-this/x86-print-this",
                    "source" : "src/print-this"
                }
            ]
        },
        {
            "type" : "group",
            "name" : "hello",
            "contents" : [
                {
                    "type" : "resource",
                    "name" : "riscv-hello",
                    "documentation" : "A 'Hello World!' binary, compiled to RISCV.",
                    "architecture" : "RISCV",
                    "is_zipped" :  false,
                    "md5sum" : "6d9494d22b90d817e826b0d762fda973",
                    "url" : "{url_base}/test-progs/hello/bin/riscv/linux/hello-20220728",
                    "source" : "src/simple"
                },
                {
                    "type" : "resource",
                    "name" : "arm-hello64-static",
                    "documentation" : "A 'Hello World!' binary, statically compiled to ARM 64 bit.",
                    "architecture" : "ARM",
                    "is_zipped" :  false,
                    "md5sum" : "71b2cb004fe2cda4556f0b1a38638af6",
                    "url" : "{url_base}/test-progs/hello/bin/arm/linux/hello64-static",
                    "source" : "src/simple"
                },
                {
                    "type" : "resource",
                    "name" : "arm-hello32-static",
                    "documentation" : "A 'Hello World!' binary, statically compiled to ARM 32 bit.",
                    "architecture" : "ARM",
                    "is_zipped" :  false,
                    "md5sum" : "15defa57a6c0035590992f8d715e9318",
                    "url" : "{url_base}/test-progs/hello/bin/arm/linux/hello32-static",
                    "source" : "src/simple"
                },
                {
                    "type" : "resource",
                    "name" : "mips-hello",
                    "documentation" : "A 'Hello World!' binary, compiled to MIPS.",
                    "architecture" : "MIPS",
                    "is_zipped" :  false,
                    "md5sum" : "c98040d3802b49c37b8d88811cd896d5",
                    "url" : "{url_base}/test-progs/hello/bin/mips/linux/hello",
                    "source" : "src/simple"
                },
                {
                    "type" : "resource",
                    "name" : "sparc-hello",
                    "documentation" : "A 'Hello World!' binary, compiled to SPARC.",
                    "architecture" : "SPARC",
                    "is_zipped" :  false,
                    "md5sum" : "b242b62c32dd0e0eb7b79141d2be7707",
                    "url" : "{url_base}/test-progs/hello/bin/sparc/linux/hello",
                    "source" : "src/simple"
                },
                {
                    "type" : "resource",
                    "name" : "power-hello",
                    "documentation" : "A 'Hello World!' binary, compiled to POWER.",
                    "architecture" : "POWER",
                    "is_zipped" :  false,
                    "md5sum" : "3402ef20eb11e0a8580b0fde0a692bc3",
                    "url" : "{url_base}/test-progs/hello/bin/power/linux/hello",
                    "source" : "src/simple"
                },
                {
                    "type" : "resource",
                    "name" : "x86-hello64-static",
                    "documentation" : "A 'Hello World!' binary, statically compiled to X86 64 bit.",
                    "architecture" : "X86",
                    "is_zipped" :  false,
                    "md5sum" : "dbf120338b37153e3334603970cebd8c",
                    "url" : "{url_base}/test-progs/hello/bin/x86/linux/hello64-static",
                    "source" : "src/simple"
                },
                {
                    "type" : "resource",
                    "name" : "x86-hello32-static",
                    "documentation" : "A 'Hello World!' binary, statically compiled to X86 32 bit.",
                    "architecture" : "X86",
                    "is_zipped" :  false,
                    "md5sum" : "d46e559a4272e75a0086b382560d296e",
                    "url" : "{url_base}/test-progs/hello/bin/x86/linux/hello32-static",
                    "source" : "src/simple"
                },
                {
                    "type" : "resource",
                    "name" : "x86-hello64-dynamic",
                    "documentation" : "A 'Hello World!' binary, dynamically compiled to X86 64 bit.",
                    "architecture" : "X86",
                    "is_zipped" :  false,
                    "md5sum" : "e9b31ab86ce0f95e290ce7661cf7cf88",
                    "url" : "{url_base}/test-progs/hello/bin/x86/linux/hello64-dynamic",
                    "source" : "src/simple"
                }
            ]
        },
        {
            "type" : "resource",
            "name" : "sparc-insttest",
            "documentation" : "A binary which will run several SPARC ISA instruction tests.",
            "architecture" : "SPARC",
            "is_zipped" : false,
            "md5sum" : "621434719e68377443ea0f2e3a50e4cb",
            "url" : "{url_base}/test-progs/insttest/bin/sparc/linux/insttest",
            "source" : "src/insttest"
        },
        {
            "type" : "group",
            "name" : "asmtest",
            "contents" : [
                {
                    "type" : "resource",
                    "name" : "rv64mi-p-access",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f79864adb24b4d9d58973fe296555dc3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64mi-p-access",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64mi-p-breakpoint",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cf9c2c258bc4ee79f6ab725dcd93c8a3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64mi-p-breakpoint",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64mi-p-csr",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d184e318ca5583c7459d210af833f67d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64mi-p-csr",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64mi-p-illegal",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "7f5bb9a8dc5b3556c63f24966edf6ad2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64mi-p-illegal",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64mi-p-ma_addr",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "01720cfc720c49af44593fb66e63e06e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64mi-p-ma_addr",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64mi-p-ma_fetch",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6a8ee354739700aa4da0cf256ae3b623",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64mi-p-ma_fetch",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64mi-p-mcsr",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1894b9678b44a1317bf0fda2bc767443",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64mi-p-mcsr",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64mi-p-sbreak",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "50e24f358eeceb443c18fe4e566957b2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64mi-p-sbreak",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64mi-p-scall",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b95617ad90fd92f3f518c626bc1c81fc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64mi-p-scall",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64samt-ps-sysclone_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "84dc170bb877dc516f6127371f813087",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64samt-ps-sysclone_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64samt-ps-sysfutex1_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "fe859cc6a504d62bc3abbb751b55e416",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64samt-ps-sysfutex1_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64samt-ps-sysfutex2_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4a8d53dd89756e6c74ed0925fab72fc4",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64samt-ps-sysfutex2_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64samt-ps-sysfutex3_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ec61b4108d4c6bb904600a588bb367d3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64samt-ps-sysfutex3_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64samt-ps-sysfutex_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3b805a4400927b59e97a2f678a622f7b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64samt-ps-sysfutex_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64si-p-csr",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "fb9db247f8acd3fa330e383942b7170c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64si-p-csr",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64si-p-dirty",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "916747b2226aab4ae7ca05b7eaebc189",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64si-p-dirty",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64si-p-icache-alias",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "bf1d206a09b1b5506533db47d195e354",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64si-p-icache-alias",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64si-p-ma_fetch",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "a3451c72e5bc0fecdf34cf8c59ace267",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64si-p-ma_fetch",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64si-p-sbreak",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "08afcd6a559f0625ff2ad490573da7c2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64si-p-sbreak",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64si-p-scall",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "08544fc1982fb4223b9516908d73c66e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64si-p-scall",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64si-p-wfi",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "22442bfd1982596f4b7d2ce34256a2d6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64si-p-wfi",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoadd_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4ae52283ec5265491a331b040faf543c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoadd_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoadd_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "5317855fb37fdb1eadb141bc5de52c43",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoadd_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoand_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e7621c3e127790675216e6fafb236ec0",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoand_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoand_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "2f017ecde182922b1039158a9f1252ef",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoand_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amomax_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0a172c82597d9614b93f074d7f4442d4",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amomax_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amomax_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "089bf05a30b30d1d25f8858d9823087b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amomax_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amomaxu_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "82f82aedec0b48994f648082a8a06801",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amomaxu_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amomaxu_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c3bfd1da662a92b8685839e85585b342",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amomaxu_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amomin_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cb43912d40d8b0eea1ac9fe45557a32c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amomin_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amomin_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cb2488c129deaf82b1945d7617d45b94",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amomin_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amominu_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "a2cc432c9f969a871b851d6ed7906e25",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amominu_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amominu_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "796023fb8918ca75353d7850daf14a93",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amominu_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoor_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "dc0dc9108bb9bdba7d75ecca8313216c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoor_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoor_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4fda30de396c92eaaf16b69c728a3a7d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoor_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoswap_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "83659ebf6fbd6a57648f1ba8c507aa4b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoswap_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoswap_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9d06c8c3ceb069ef86ff2de4815282cd",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoswap_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoxor_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1af9fab80459fde57f4bf4e9c01d9093",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoxor_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-amoxor_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "dda14b981718906fc234b8227904c7c6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-amoxor_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-p-lrsc",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8b6ad66b8bbb4df80d1516f6817b7660",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-p-lrsc",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoadd_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1f03b3b804be0a2132057003b58f8a2b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoadd_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoadd_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "955744c2e0dbba10ca01e690c0958364",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoadd_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoand_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cc3f74959c923b05340aa24cfc63a801",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoand_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoand_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "2c5ad7e346cc4e0e52dfc76789efe397",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoand_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amomax_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "2123dce5d094f2fc3bc5fb2943562be1",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amomax_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amomax_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9270905c5113a039b637022170e1fc74",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amomax_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amomaxu_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "808fd2cccbd11f6434b5dcb6c5d3c5bf",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amomaxu_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amomaxu_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "26da4254d99e55fe009c7cc34ac1a987",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amomaxu_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amomin_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "71b99433af69e09f63e0f22d5a02cc49",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amomin_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amomin_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4f2f90ba9a75b85f9207850e27bb6d00",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amomin_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amominu_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "636269f97f41643f004c259ec446649c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amominu_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amominu_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "584c473e61733eb5cf58911b3136647a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amominu_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoor_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4729ad637554898b6f26458a104f6b1c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoor_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoor_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c671e3b095455b8401298009104e92ba",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoor_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoswap_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d4df6b07df820da6eb9eecd8a9029ff7",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoswap_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoswap_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "2d9d9d3d6b02cfd4e3506b6b8b4557e7",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoswap_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoxor_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0426ab864eae292dab59998e21b78e49",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoxor_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-amoxor_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f5c17e8c932aeb0e9dc3ad2a4e0ba168",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-amoxor_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-ps-lrsc",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "21090834e56595bfdb9c2fbb89114cb5",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-ps-lrsc",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoadd_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "af091994135470f609cab40bbcea1a63",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoadd_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoadd_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d78c80bdab8a1fc073fa1f186cec8830",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoadd_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoand_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1094cdd438411b12f827bf1dcdace80e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoand_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoand_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ef5e91a05a48bb7d703841ce8ece84a6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoand_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amomax_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "7ae80f64520e3c110b8bbec945094a53",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amomax_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amomax_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "701a326352d18dbaffe806c109ad692a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amomax_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amomaxu_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "5ef8cc47ea14171f396ddbba188e3983",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amomaxu_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amomaxu_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d999a055462eb4179be196d1125d876c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amomaxu_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amomin_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "09e4e4d639834b295a665051bf3ce1ef",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amomin_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amomin_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "179c2591ce919a2488f1e22a0f5d283a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amomin_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amominu_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "910ad4686c643213a7829b586002637b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amominu_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amominu_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d808d5cd0398c9ecd5773e50e22abf2e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amominu_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoor_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "de1dcb7d714c669be86c86bd25a85651",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoor_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoor_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9780206d1b9518b10c8d9e72cf0239eb",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoor_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoswap_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8cc9a4f1d0b4489d0a0bd70186beaac2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoswap_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoswap_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "eca745d0dbe4ae57fe6b110317834875",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoswap_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoxor_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3bbee5900b7d9e540ce212f4dd423c7d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoxor_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-amoxor_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8fb3a2fb5d50813d077d80210d010828",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-amoxor_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ua-v-lrsc",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "932d6654d7a960b455dff6f09d5f69ea",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ua-v-lrsc",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-amoadd_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "87b684a2f6bb281d7ad4b7b042b73854",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-amoadd_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-amoand_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "24ccac26314dc1f05928f8244cb0cbe7",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-amoand_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-amomax_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e713e0e561b53e56f9339f67b663ca9c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-amomax_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-amomaxu_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "da2bf05a420e75221056003767c878a8",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-amomaxu_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-amomin_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "97e120b06112fa2def234de4fede74ab",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-amomin_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-amominu_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8ea0a86db7b7e02ae78d4f07374ab52f",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-amominu_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-amoor_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b5f540731786f31803c3c60237623fe6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-amoor_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-amoswap_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3775368c4726324b66150ea3f9d2a260",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-amoswap_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-amoxor_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "57e926bd3326d5559e592c27c32e53fb",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-amoxor_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uamt-ps-lrsc_d",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "70ff384c8ef9b66e564a273e9e6d2648",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uamt-ps-lrsc_d",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uc-p-rvc",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6a75f689b2bd4582a43bdbbb31bb382c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uc-p-rvc",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uc-v-rvc",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "5fe84fedbeb130f5817c0fe0a5584b3e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uc-v-rvc",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-fadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "df0e68e382a89931501e2cc46314ff3b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-fadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-fclass",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9ba1f2aab1822501ce977b7a2c7c4a6b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-fclass",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-fcmp",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "46e7f1ce5cd54bf2d3419d84c0153f24",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-fcmp",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-fcvt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "581531f02f3c135ed2c4ad6bd4ab6ee4",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-fcvt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-fcvt_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "7a937a695c44129aa6d182d435a421fc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-fcvt_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-fdiv",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ec2ce086d1bbe1b29622f70c7901abd8",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-fdiv",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-fmadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e7163e05deadb1bfc22b81ba448a860f",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-fmadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-fmin",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e2b6014cf013c294ad91558fe2f0ed21",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-fmin",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-ldst",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d9ba4fff56f725ea79d0e70862247c44",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-ldst",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-move",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ba51a7c9ac36c0f2258863e6c8a7bd0a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-move",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-recoding",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "fc2e947926e128c983a957783f32daae",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-recoding",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-p-structural",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "a3a59386a27eea3f80f5461216c3344d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-p-structural",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-fadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "fc8de228dd951868fb274786b6ff9ff9",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-fadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-fclass",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "da76a1a5ed8c450e5fa76a4c27079bb6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-fclass",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-fcmp",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "aa42a6da32ee329295640ebba07de718",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-fcmp",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-fcvt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "87e11c0fa32e8ff3fd9a9f1781a91bb7",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-fcvt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-fcvt_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e2bb2d9995a606521e443713a99ac569",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-fcvt_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-fdiv",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1aa837b6dccf2e11aceebed8d3a6a991",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-fdiv",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-fmadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3125478135067cf9b44dfae5c4b6df31",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-fmadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-fmin",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3cee89db4e4881f0f0f903114bf00fe0",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-fmin",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-ldst",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "254df67bb1e4ae17c381a6aa028ab217",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-ldst",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-move",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4bbd2e8d8929c0b5aa3984d4f07c9b7d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-move",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-recoding",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "110a26cf26a24a787759dfd95ca6b57e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-recoding",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-ps-structural",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "bfbd32687ce03667277b1aab264eaf0a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-ps-structural",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-fadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b9163081289a8c6c54b9c01f94f11d03",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-fadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-fclass",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "dce53c303671f09b5c01216cfe14a641",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-fclass",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-fcmp",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3826335b0512b741305661eb57e86628",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-fcmp",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-fcvt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "a6c4492502f5bb0f983d152b7b6c535d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-fcvt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-fcvt_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f2261cec4e1bf4d253ab18d27f32f119",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-fcvt_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-fdiv",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0bf318396f5fc0bebf810eca1f959a20",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-fdiv",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-fmadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e628460d478c3db8080e7faaa0fc5b22",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-fmadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-fmin",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9a738938d06df5ac12889e01c911f78d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-fmin",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-ldst",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "97b2d693e4a9f6ed21137f4c7d541685",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-ldst",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-move",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4b758433d00da42338ddeaecc3e71e13",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-move",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-recoding",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "90dbc06d2f035deb55c9f03385d89908",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-recoding",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ud-v-structural",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e79911f5564596d0e6fcf74126f82928",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ud-v-structural",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-fadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b72484f7b3acf248a0bb3b95dd2952e5",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-fadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-fclass",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "abc897ae9c8008ec62b4d487dc949bcd",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-fclass",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-fcmp",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d9d51339aaa8901bff0514d7b2d926b5",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-fcmp",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-fcvt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "55461ce28b5f6d92dc6883e989493705",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-fcvt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-fcvt_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "54cf9f4b8b899881ddc9b07f8b980866",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-fcvt_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-fdiv",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ecaabb4034c268fd73995f25570c7e8b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-fdiv",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-fmadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "89aaaa9e8ab9d822f384c3f3543d304d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-fmadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-fmin",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "abd4b19567c4c3aa3cd312180251b914",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-fmin",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-ldst",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "51590ab6fcb6975ddfca44a953d25ecb",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-ldst",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-move",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ff9b084b3f1e88ac8825a1726f1ac353",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-move",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-p-recoding",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d9df1aecd763a903e93f09ebcb6ac516",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-p-recoding",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-fadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4fc255350e09958b7d1dac5c15d6a458",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-fadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-fclass",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c779cb1efab84f59776d8c49f11b891d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-fclass",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-fcmp",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d1b1e98a9cc071d68c037f21b1a6b515",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-fcmp",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-fcvt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0c8d0365a7364f90fde48da56f8d17a0",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-fcvt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-fcvt_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9500c44421227806e1167c5ff63fc25e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-fcvt_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-fdiv",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3feb667478a073a4383987161ed1b3f5",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-fdiv",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-fmadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b6684ec8e959dc350941d99188a4576f",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-fmadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-fmin",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d7f7ca68f9b842c4df23170fcec42c8c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-fmin",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-ldst",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "610fd5f2585be41fe2c6c7f14ef6874c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-ldst",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-move",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "49c3b074e112f3736ed2dd9aa60ead5d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-move",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-ps-recoding",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c3eb1450641d33083592fccb458f7054",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-ps-recoding",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-fadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "5960892db8d92369fee8906f811c2b7e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-fadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-fclass",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1e481a47ee5dde3cafafd811f26de687",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-fclass",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-fcmp",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0c1c49e5fa9d3c4710eb1aa8799ebe7d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-fcmp",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-fcvt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e355d5f88669f1eab54fdbb7a66cfbc1",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-fcvt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-fcvt_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "52e6bcfcd0fc671126f4f93277fdb33b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-fcvt_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-fdiv",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "585f6f7ff1426432841566996c8b1e86",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-fdiv",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-fmadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "a771e99476fe60661f70d2c38d482b59",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-fmadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-fmin",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4277c4a3a15154418440f8b667fb5897",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-fmin",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-ldst",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "93ecdee8e10bad66a9dc87b4f0bd6abf",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-ldst",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-move",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "fab0d3008a72e65a8cda7b53bb2b4ef3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-move",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uf-v-recoding",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "93010be0f7532720e52b5c42e66cec4c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uf-v-recoding",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-add",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "5ae1f4792f8ac4a4fd81f86244852429",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-add",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-addi",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f8ddfbd3eaf80ffe9f3ef962ce2fa3dc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-addi",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-addiw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "811df894399a88791205bed13af760df",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-addiw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-addw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "5859a793f0c9ceea435d775acf9a809d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-addw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-and",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "12c4f4a5d89fc1f8559176f58bba7fbc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-and",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-andi",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d77d7713c2db6a4b4cde3f5635c0656a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-andi",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-auipc",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "08aefe8b537ba936dd9b6e1847efdda5",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-auipc",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-beq",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "34e3d014b15327200ae358288311449f",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-beq",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-bge",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e3bde7e1a401b690f4aac83e27faf06d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-bge",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-bgeu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ce6e5c09f53074fb47ec9e138c839856",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-bgeu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-blt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "a40194025841ef4a97d75788f27e8901",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-blt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-bltu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9770c269235de402e047c2d77f317a00",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-bltu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-bne",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8ecaadbc6f50336d3001993f6076da6d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-bne",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-fence_i",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6c68ee9ca88db3491d9964fb8fbb292e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-fence_i",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-jal",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d0c4593786e20835f21854187aab5336",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-jal",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-jalr",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8f7b5ae0fb06339646d442faeb3d2112",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-jalr",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-lb",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "410b4b665b2700bfc7de8ca2bee13eba",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-lb",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-lbu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b2a8b33f9ef795c61b20ad609e8d4f68",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-lbu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-ld",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cfbbf197c28734913b82af86acb8c6b6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-ld",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-lh",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b27b4d2c93df265c40dd775db91a51d4",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-lh",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-lhu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0191f964bb5943bc5190d053889bfe58",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-lhu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-lui",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8710ceb57d6270e93036c17078d98d7c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-lui",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-lw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "dfcbdaea89a69181574935fa06480d19",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-lw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-lwu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d69dc6ea165ec6c9214b712e15a1d8ab",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-lwu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-or",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "45482709f8564d4ba4b9906233b9bb7b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-or",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-ori",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3c041292f2c31baa227c2e54975220fe",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-ori",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sb",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1cd1d04fca58d003ce28b65d92aa8889",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sb",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c13a92bdf9d9faf4d991cbd4082b9166",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sh",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6741dde915fdb1fd7f8bb4ac7852158d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sh",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-simple",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c036528d8a1f12baf7b546c9c43eac67",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-simple",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sll",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "afaf75edf394431f0541421fdedef154",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sll",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-slli",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d9b824f13fe53593069279b587f0fd21",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-slli",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-slliw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0483c28d9120c85221da62919075fe8e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-slliw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sllw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0d3f4747b0046b58b2ba155d20405fae",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sllw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-slt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b14b9dec4e19c6548d8e73a81c82fef3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-slt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-slti",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9d161594c5ae5b1636d2ebc981d2a45e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-slti",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sltiu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6a8625e73078e75b778213565c7631dc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sltiu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sltu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "31ec3d8b7d4765ef07deb50d79d38ed0",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sltu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sra",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "7d956b7c764493886357194f5dbc476e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sra",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-srai",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cd631b57809962e3237726aa159673c8",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-srai",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sraiw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b61112cc7c6d550393660b872fb3f064",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sraiw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sraw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d3c5aaa6c67ee3e423548f78c1e114ea",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sraw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-srl",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ed342633350a369977683b069bee7d3a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-srl",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-srli",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "da4399a1da3b5caf218ed4950e96762b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-srli",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-srliw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "85d33d6b905527fd99afc52979eb1612",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-srliw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-srlw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3977283582e73e51cd67f828b2ee2315",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-srlw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sub",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "592f8add96467450a7de320221d86d76",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sub",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-subw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8994d07e1f5b91610d95049cdf8287a9",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-subw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-sw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f61fa9d97a70fafcc77eeac8dae36484",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-sw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-xor",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "594712c1b8c74b5b087bac30246e9364",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-xor",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-p-xori",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "19cc10117d97e3fbb41e2d2786f79198",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-p-xori",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-add",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "13b6948da6a2357bcdcd829b56e84bd1",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-add",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-addi",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6dfbf697061615476057e460c9f62b3d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-addi",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-addiw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "015db9a17305885bd5907ab9d3fa91dc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-addiw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-addw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "a77aadcebc1f3d5cf4526dee37c90510",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-addw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-and",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "088d34a01ff842d44b5a4db607e549c4",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-and",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-andi",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ddde8986ae4e4fd87c4bf4b16b2544aa",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-andi",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-auipc",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1a4847e8ec5d826eea60f709d95dac97",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-auipc",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-beq",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0434433ea79b6cc44c001a161babbd67",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-beq",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-bge",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "fa822964f28d847ff7b1d69a1ee6aa7c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-bge",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-bgeu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c9680e0e6081fc0d6f0369c563165228",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-bgeu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-blt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f224e7e7ff0e6975d9ced89f4b78a62a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-blt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-bltu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "842078af75769453b2df67c5c28babb3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-bltu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-bne",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6cf9760f0307b15b2ddcb317017e8087",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-bne",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-fence_i",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "78d9408139d005819a58802aa6a20e7e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-fence_i",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-jal",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "30f8d2b4a754b1c0db615aa53f4204aa",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-jal",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-jalr",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "656ba873c7261240d0bcc393a99644fa",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-jalr",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-lb",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "af983b6499aa6b1aa8f48625b28122fa",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-lb",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-lbu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b862e0d36be2780fc2208853419208fa",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-lbu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-ld",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "27cfd2226a88a83ec00a5f28e71f2591",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-ld",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-lh",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e5de1e7f4798765fc25c5279fac8d1c4",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-lh",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-lhu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4afe6afdc5320dd45e7080396f7378c4",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-lhu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-lui",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0fb63e51ca357783e8134e55d0d6fd95",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-lui",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-lw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "52ff2024de2a0f9c6c422bb6e5f1d2a3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-lw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-lwu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ff71b5ac6e75680a90f825ba0cc78285",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-lwu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-or",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "878d822e9a8825327f060200403d19d9",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-or",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-ori",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "69e92a5bfaff07667d904a5d4f26f47d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-ori",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sb",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "48de8bb47f1d4f4c2b8d67ccac452c3d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sb",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cb1bb63deaa9da41714d9991553c2ef0",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sh",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c912983af1c58176fb7d567be732c87d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sh",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-simple",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "62b01468e7c4d324c0acc7536b0b7e0a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-simple",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sll",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "283d19bdb002c986366ff270839cf15e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sll",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-slli",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "50845da8fd5f57789c55e2b025f0e90f",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-slli",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-slliw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "006859a1917f83aa5a7f1eb2ba61421a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-slliw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sllw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "fa74956bc42617642cf56b17ce7b7b82",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sllw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-slt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "669aa8ae65e5614752b5994eb81f7de1",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-slt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-slti",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "44d2269759e1b5fb2ab2d764060292fc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-slti",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sltiu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3415858543b5742bc5184e0b3c993300",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sltiu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sltu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "28cb31170ad9d6c504c29d8c29edd24f",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sltu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sra",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f109c193247e2fb8434ce4c332f0cb41",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sra",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-srai",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "36d6c4883d27d7f6e96fd67cbeecca45",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-srai",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sraiw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d8d62c3727e5176ede4ba3839dfcc9cb",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sraiw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sraw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cb56211febe89c3b634c9b1de5d5f3e6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sraw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-srl",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "981b412a0c1114c34dfdb66b8068af71",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-srl",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-srli",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4c64e4c765ba8d1cbe12541473fd1f70",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-srli",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-srliw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ed8bed99a31ef1434f8cc0eae36fb651",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-srliw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-srlw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9ea198e8b3841fa717046342083b3db1",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-srlw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sub",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d264dce065710136c1a8d351400f80df",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sub",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-subw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9ed1d807c716c7802ee8151d03daf9db",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-subw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-sw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f1e06d50f81552c17df23cd4ee17825e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-sw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-xor",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "82b4ec464f6970b1aeea47aac09355ee",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-xor",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-ps-xori",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "06c59f7a2962d7b43fffbb4c9a74f34e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-ps-xori",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-add",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4ac53c865c9f93b7669e82ad445ad1c8",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-add",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-addi",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "a77b433e265327ae78581f03e4a0b2bc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-addi",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-addiw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3d289fb592df639eaffd4dc92516e3ce",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-addiw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-addw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1f9b805b62b7a261aff16d682c0f9dab",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-addw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-and",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c536e569ec53a006b0f68954b2ac19a5",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-and",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-andi",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4851b63d6bf0a09235351eba6c4d3c21",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-andi",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-auipc",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "314b3d6e861457ff8292b6591ffd4f51",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-auipc",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-beq",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6f9d00065f40ef22577d16c3a5b288f8",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-beq",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-bge",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "feb48724a40b2a434331fc4562094b80",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-bge",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-bgeu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9a5c00386faf006204bdaaf5e04e5a2d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-bgeu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-blt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9346cee2df12e391250dba9f8407e668",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-blt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-bltu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "5ea5c0cd054c998a4779b4f96550fbfd",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-bltu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-bne",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4affbfe59c08c3c5df5e7c1aa2a575d3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-bne",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-fence_i",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8ca111c5153f595cdff1d0cbfb46d8d0",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-fence_i",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-jal",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e53a4a6a608c32c3fc40220feffe74c4",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-jal",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-jalr",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "a8883869a4cca9a62993eab586bf9983",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-jalr",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-lb",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b5ba6b4fe284446443e14a469a4201e9",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-lb",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-lbu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d58a68b36b10f4b360e3b49890d8f747",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-lbu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-ld",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "5106dc8f1c6fca7f05a592462ec26025",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-ld",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-lh",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c745aebb75f4789ad7a944b326cc98bc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-lh",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-lhu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "95ca302d8064d31d5e7f675ede76e5d2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-lhu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-lui",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "d91f414651ab5d6820f327c6a0283f3e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-lui",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-lw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "75218650a406049dd98d8b563e75dd29",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-lw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-lwu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "65825081f96f22844a326a6d6790b755",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-lwu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-or",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "bcf7ec774ba67868de996c94ffb28a8e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-or",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-ori",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "9ab3eea49545d31068a6f52a3893a4d6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-ori",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sb",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6ee42880b6c060d2f7bcc217564f6450",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sb",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "676720cb24ac2adaee6ed0ec7ea27ccf",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sh",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "82aca94c8969bd2f8ea7ca9be7fbc8f2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sh",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-simple",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b26c36216ac9b248a4434950d2c61a8e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-simple",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sll",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c328191502ac82baa27d920991349234",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sll",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-slli",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "258c49788d40ce7ff5fc7459ed0d8c76",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-slli",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-slliw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "da8198692b96d46cfd2316590aa700de",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-slliw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sllw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e8546fe87f70356c61be6c570e38b994",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sllw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-slt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "5d4cd4d048577413992ad2f00204bc50",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-slt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-slti",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3ec767139c3603c9a610f29f1890e7a6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-slti",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sltiu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "17a4044b1ee6dd205a5e38752c4ce319",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sltiu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sltu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0995455fe6716d8b64c3273661702164",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sltu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sra",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c6f8bf8fe35d6e972ef5010894462893",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sra",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-srai",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f4cf327543b4a02ff3d2fc9164dc8c3f",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-srai",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sraiw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3115a0db99d8ca24af002f0375fa3336",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sraiw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sraw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8cff4bf8c7c2d834f5a4b10e2f7571f3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sraw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-srl",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f0a51bfd1ba6510f331d7c677af7ae74",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-srl",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-srli",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "956f9fe8fdf55dfde2387334d3c57ce0",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-srli",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-srliw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b0c31b43c2ce91b3c296122785f0c1fc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-srliw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-srlw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cac0b3d218e978e90d981259098152ed",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-srlw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sub",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "12998e74b2b9f66ac1889de77158f553",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sub",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-subw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c14f2da36dd956c663e8b8d504ef87d3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-subw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-sw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b65d836977544168934a5aa80e72a7b2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-sw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-xor",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3fc976679b7404343f553cca9d837ccb",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-xor",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64ui-v-xori",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "54e3e45b8715933284af73de1dea33f0",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64ui-v-xori",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-div",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "820dd93e9bd32aa0c6078e82b3a1d56e",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-div",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-divu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "2423002bc3997c1bb49db95ef5c2aae8",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-divu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-divuw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "87992ad64dd865331a4bcbf3fa14c014",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-divuw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-divw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "94cdea0f7388a1c756017ad892842066",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-divw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-mul",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "56a0b94c8b01189a4ee89fa963fa8728",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-mul",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-mulh",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "96b114196281da84401ea85fbe7374cd",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-mulh",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-mulhsu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c4e736755d41b88d38609d1e93c478b6",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-mulhsu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-mulhu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "69eb85950fc484e5d342de6b3e5bff1d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-mulhu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-mulw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "1e6b85556decd6f1fcce889f8d2013d3",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-mulw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-rem",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8c8ddfce7ca7feb2c454b882cdb7633a",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-rem",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-remu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b8b793b7b178d986e36ff93e2b1e0f9c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-remu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-remuw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "258ed5fc8d7cd8002fa3ec7288e63aaa",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-remuw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-p-remw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "926257e6eccf64456086994635101f0c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-p-remw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-div",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "602ae8b873ba3e39b4b62300b66f59a2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-div",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-divu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8809b137e030244ca0f9ffc0d1989504",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-divu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-divuw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c294f1703a609b2ab91ef6b31e9fa1d8",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-divuw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-divw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8c59d76fd7786c2b0bbd9f3c54794774",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-divw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-mul",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f9d4ede3f8427efdd0c79c2c17938f3b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-mul",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-mulh",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "34514d7c23c1ad2ce38746b79d398a24",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-mulh",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-mulhsu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "e7ff21e8c1ea8876d517145c25ab13d5",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-mulhsu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-mulhu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "dc55005966c9c28062e8a79f83b65f96",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-mulhu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-mulw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "ae60abbf79902a2027a9e4338e74cc6b",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-mulw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-rem",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c1736d9576801eb4bec8fa1685b44691",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-rem",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-remu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "42d352b6738309f9068dd241f074370f",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-remu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-remuw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f314392cb6caea00338bb19ca720be12",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-remuw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-ps-remw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "951f8ff2e317fd8789cf84b8a23150a2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-ps-remw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-div",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3b5f9fed1d39c75ea32408e19bc4a0df",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-div",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-divu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "bd0825b6474751887b99d7a05df31fa8",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-divu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-divuw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "c8855c9a292eb86dee8e11ddcc88b843",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-divuw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-divw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "6e33cb55a71ba378c739fb63cecf85a1",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-divw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-mul",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "cbf41e207dfb09c352582d97f1cf5ddf",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-mul",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-mulh",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "387c221747ca8160b6f461060ea44640",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-mulh",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-mulhsu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "09d283d8a482edee0bbaa04abaffe587",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-mulhsu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-mulhu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "f21396ba8d1feba4225413fcdd93e859",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-mulhu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-mulw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8b7409faa548e836aa8391544659b237",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-mulw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-rem",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0375cd5552dbfdfafe6272f34a4312bc",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-rem",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-remu",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8d2301cca38b588f03206b9dd4d0e082",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-remu",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-remuw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "241e4de12fd79207aac6f321773b041c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-remuw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64um-v-remw",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "aff1c28cdb84b9509547935c62aec435",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64um-v-remw",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-fadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "b4b6127cf0b70dc428e9dc84ff924675",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-fadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-fclass",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "51987dc0a2e25c41ea7a60b3e1b6d3e1",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-fclass",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-fcmp",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "38d202dfe077171e0dcfcd4f3a09e14d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-fcmp",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-fcvt",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "4e703e3534179c2db1173c7c67b2edb8",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-fcvt",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-fcvt_w",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "195875e6a42e191681f0d0e0f7c4d5a2",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-fcvt_w",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-fdiv",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "06c66b6a66480122699d3224f84e0abe",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-fdiv",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-fmadd",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "096e6454a25877b19de22054ecc08540",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-fmadd",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-fmin",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "3b392c9fb858199f6a701fd4b16feb0d",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-fmin",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-ldst",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "794f5106977c726639e4d0f6b93fa38c",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-ldst",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-move",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "0d3bd78a75a3dded8d97be0965af1b90",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-move",
                    "source" : "src/asmtest"
                },
                {
                    "type" : "resource",
                    "name" : "rv64uzfh-ps-recoding",
                    "documentation" : "A RISCV binary used to test a specific RISCV instruction.",
                    "architecture" : "RISCV",
                    "is_zipped" : false,
                    "md5sum" : "8b6f3dbfa31f3e679417ba7b35ee8c2f",
                    "url" : "{url_base}/test-progs/asmtest/bin/rv64uzfh-ps-recoding",
                    "source" : "src/asmtest"
                }
			]
		}
	]
}

